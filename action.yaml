name: 'Dune Upload'
description: 'Uploads a CSV file to the Dune API'
branding:
  icon: 'upload-cloud'
  color: 'orange'
inputs:
  dune_api_key:
    description: 'API key for authenticating with the Dune API'
    required: true
  csv_file_path:
    description: 'Path to the CSV file to upload'
    required: true
  table_name:
    description: 'The target table in the database where the CSV data should be uploaded'
    required: true
  description:
    description: 'A brief description of the uploaded data. Will be displayed in the Dune UI in the future'
    required: false
  is_private:
    description: 'Whether the data should be private or not. Defaults to false'
    required: false
    default: 'false'
runs:
  using: 'composite'
  steps:
    - run: |

        # Reading inputs
        DUNE_API_KEY="${{ inputs.dune_api_key }}"
        fo="${{ inputs.csv_file_path }}"
        TABLE_NAME="${{ inputs.table_name }}"
        DESCRIPTION="${{ inputs.description }}"
        IS_PRIVATE="${{ inputs.is_private }}"

        # Check if CSV file exists
        if [ ! -f "$CSV_FILE_PATH" ]; then
          echo "CSV file not found: $CSV_FILE_PATH"
          exit 1
        fi

        # Convert CSV file content to a string
        CSV_CONTENT=$(cat $CSV_FILE_PATH)

        # Prepare JSON payload
        JSON_PAYLOAD=$(jq -n \
          --arg tn "$TABLE_NAME" \
          --arg desc "$DESCRIPTION" \
          --arg data "$CSV_CONTENT" \
          --argjson isPrivate $([[ "$IS_PRIVATE" == "true" ]] && echo true || echo false) \
          '{table_name: $tn, description: $desc, data: $data, is_private: $isPrivate}')

        # Make the API request and capture the response 
        API_RESPONSE=$(curl -sS -w "HTTP_STATUS_CODE:%{http_code}" -X POST https://api.dune.com/api/v1/table/upload/csv \
          -H "X-Dune-Api-Key: $DUNE_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD")

        # Extract the HTTP status code from the response
        HTTP_STATUS=$(echo "$response" | tr -d '\n' | sed -e 's/.*HTTP_STATUS_CODE://')

        # Extract the response body (excluding the status line)
        RESPONSE_BODY=$(echo "$response" | sed -e 's/HTTP_STATUS_CODE.*//')

        # Check if the HTTP status code is in the 2xx range
        if [[ "$HTTP_STATUS" =~ ^2[0-9][0-9]$ ]]; then
          echo "API request was successful (HTTP $HTTP_STATUS)"
          echo "API response body: $RESPONSE_BODY"
        else
          echo "API request failed (HTTP $HTTP_STATUS)"
          echo "API response: $RESPONSE_BODY"
          exit 1
        fi
        
      shell: bash
